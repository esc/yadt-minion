#!/usr/bin/env python

import os
import subprocess
import sys
import select
import errno

from yadtminion.configuration import load_yadt_defaults
from yadtminionutils import get_yum_releasever


def flush(froom, tos):
    while True:
        line = froom.readline()
        if not line:
            break
        tee(line, tos)


def tee(line, tos):
    for to in tos:
        to.write(line)
        to.flush()


def cmd(args):
    defaults = load_yadt_defaults()

    log_dir = defaults['YADT_LOG_DIR']

    log_file_name = os.environ.get('YADT_LOG_FILE', None)
    if log_file_name:
        path_to_log_file = os.path.join(log_dir, log_file_name)
    else:
        path_to_log_file = './locally-called-yadt-command.log'

    os.umask(0002)

    try:
        os.makedirs(os.path.dirname(path_to_log_file))
    except OSError as exception:
        if exception.errno == errno.EEXIST and os.path.isdir(os.path.dirname(path_to_log_file)):
            pass
        else:
            raise

    if not args:
        sys.stderr.write("no command given?!\n")
        sys.exit(1)

    _setup_environment(defaults)

    with open(path_to_log_file, 'w') as log_file:

        p = subprocess.Popen(
            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        while True:
            reads = [p.stdout.fileno(), p.stderr.fileno()]
            ret = select.select(reads, [], [])

            for fd in ret[0]:
                if fd == p.stdout.fileno():
                    tee(p.stdout.readline(), [sys.stdout, log_file])
                if fd == p.stderr.fileno():
                    tee(p.stderr.readline(), [sys.stderr, log_file])

            if p.poll() != None:
                flush(p.stdout, [sys.stdout, log_file])
                flush(p.stderr, [sys.stderr, log_file])
                break

        log_file.write('"%s" exited with code %d' %
                       (' '.join(args), p.returncode))

    sys.exit(p.returncode)


def _setup_environment(defaults):
    for key, value in defaults.iteritems():
        os.environ[key] = str(value)
    os.environ["RELEASEVER"] = get_yum_releasever()

if __name__ == '__main__':
    cmd(sys.argv[1:])
